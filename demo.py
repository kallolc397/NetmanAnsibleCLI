#!/usr/bin/env python3
"""
NetMan Demo Launcher

This script sets up a demo environment and runs NetMan in demo mode for testing without real devices.
"""
import os
import sys
import subprocess

def setup_demo():
    """Set up the demo environment."""
    print("Setting up NetMan demo environment...")
    
    # Create necessary directories
    os.makedirs('data', exist_ok=True)
    os.makedirs('configs', exist_ok=True)
    os.makedirs('logs', exist_ok=True)
    
    # Create GIT repository in configs directory if it doesn't exist
    if not os.path.exists(os.path.join('configs', '.git')):
        try:
            print("Initializing Git repository in configs directory...")
            cwd = os.getcwd()
            os.chdir('configs')
            subprocess.run(['git', 'init'], check=True)
            subprocess.run(['git', 'config', 'user.name', 'NetMan Demo'], check=True)
            subprocess.run(['git', 'config', 'user.email', 'netman@example.com'], check=True)
            
            # Create and commit a .gitignore file
            with open('.gitignore', 'w') as f:
                f.write("# Generated by NetMan Demo\n*.tmp\n*.bak\n")
            
            subprocess.run(['git', 'add', '.gitignore'], check=True)
            subprocess.run(['git', 'commit', '-m', 'Initial commit for NetMan demo'], check=True)
            os.chdir(cwd)
        except Exception as e:
            print(f"Warning: Failed to initialize Git repository: {str(e)}")
    
    # Set up demo environment manually if module not found
    try:
        from demo.setup_demo_environment import setup_demo_environment
        setup_demo_environment()
    except ImportError:
        print("Setting up basic demo environment...")
        
        # Create demo device data structure
        demo_devices = [
            {
                "hostname": "demo-router1",
                "ip": "192.168.1.1",
                "device_type": "cisco_ios",
                "username": "demo",
                "password": "demo123",
                "ssh_port": 22,
                "groups": ["demo", "routers"]
            },
            {
                "hostname": "demo-switch1",
                "ip": "192.168.1.2",
                "device_type": "cisco_ios",
                "username": "demo",
                "password": "demo123",
                "ssh_port": 22,
                "groups": ["demo", "switches"]
            }
        ]
        
        # Import inventory manager
        sys.path.insert(0, os.path.abspath(os.path.dirname(__file__)))
        try:
            from lib.inventory import InventoryManager
            
            # Initialize inventory manager
            inventory_manager = InventoryManager()
            
            # Add demo devices
            for device in demo_devices:
                print(f"Adding demo device: {device['hostname']}")
                inventory_manager.add_device(
                    hostname=device['hostname'],
                    ip=device['ip'],
                    device_type=device['device_type'],
                    username=device['username'],
                    password=device['password'],
                    ssh_port=device['ssh_port'],
                    groups=device['groups']
                )
                
            print("Basic demo environment setup complete!")
        except Exception as e:
            print(f"Warning: Could not set up demo inventory: {str(e)}")
            print("Continuing with demo anyway...")

def run_demo_command(args):
    """Run a NetMan command in demo mode."""
    # Set environment variable for demo mode
    env = os.environ.copy()
    env['NETMAN_DEMO_MODE'] = 'true'
    
    # Build the command
    cmd = ['python', 'netman.py'] + args
    
    # Execute the command with the demo mode environment variable
    subprocess.run(cmd, env=env)

def show_demo_menu():
    """Show the demo menu."""
    print("\n" + "="*60)
    print("NetMan Demo - Network Device Management Tool")
    print("="*60)
    print("\nAvailable demo commands:")
    print("\n1.  Inventory Management:")
    print("    1a. List all devices")
    print("    1b. Add a demo device")
    print("    1c. Remove a demo device")
    
    print("\n2.  Configuration Management:")
    print("    2a. Push configuration (dry run)")
    print("    2b. Backup configuration")
    print("    2c. Compare configurations")
    
    print("\n3.  Monitoring:")
    print("    3a. Check device status")
    print("    3b. Get device facts")
    
    print("\n4.  Template Management:")
    print("    4a. List available templates")
    print("    4b. Show template content")
    
    print("\n0.  Exit Demo")
    
    choice = input("\nEnter your choice (e.g., 1a): ")
    return choice

def handle_menu_choice(choice):
    """Handle the menu choice."""
    if choice == '1a':
        run_demo_command(['inventory', 'list'])
    elif choice == '1b':
        hostname = input("Enter device hostname: ")
        ip = input("Enter device IP: ")
        device_type = input("Enter device type [cisco_ios]: ") or "cisco_ios"
        run_demo_command(['inventory', 'add', hostname, '--ip', ip, '--device-type', device_type, 
                          '--username', 'demo', '--password', 'demo123', '--groups', 'demo'])
    elif choice == '1c':
        hostname = input("Enter device hostname to remove: ")
        run_demo_command(['inventory', 'remove', hostname, '--force'])
    elif choice == '2a':
        hostname = input("Enter device hostname: ")
        template = input("Enter template name [cisco_base]: ") or "cisco_base"
        vars_file = input("Enter variables file path [demo/vars/demo-router1.yml]: ") or "demo/vars/demo-router1.yml"
        run_demo_command(['config', 'push', hostname, '--template', template, '--vars', vars_file, '--dry-run'])
    elif choice == '2b':
        hostname = input("Enter device hostname: ")
        run_demo_command(['config', 'backup', hostname])
    elif choice == '2c':
        hostname = input("Enter device hostname: ")
        run_demo_command(['config', 'diff', hostname])
    elif choice == '3a':
        hostname = input("Enter device hostname (or 'all' for all devices): ")
        if hostname.lower() == 'all':
            run_demo_command(['monitor', 'status', '--all'])
        else:
            run_demo_command(['monitor', 'status', hostname])
    elif choice == '3b':
        hostname = input("Enter device hostname: ")
        run_demo_command(['monitor', 'facts', hostname])
    elif choice == '4a':
        run_demo_command(['template', 'list'])
    elif choice == '4b':
        template = input("Enter template name [cisco_base]: ") or "cisco_base"
        run_demo_command(['template', 'show', template])
    elif choice == '0':
        print("Exiting NetMan demo.")
        return False
    else:
        print(f"Invalid choice: {choice}")
    
    return True

def main():
    """Main function."""
    print("Welcome to NetMan Demo!")
    print("\nThis demo allows you to test NetMan functionality without real network devices.")
    print("It uses simulated device responses for testing purposes.")
    
    # Set up the demo environment
    setup_demo()
    
    # Main demo loop
    continue_demo = True
    while continue_demo:
        choice = show_demo_menu()
        continue_demo = handle_menu_choice(choice)
    
    print("\nThank you for trying NetMan Demo!")
    print("For more information, see the README.md file.")

if __name__ == "__main__":
    main()