{#
  Cisco ACI Configuration Template
  This template generates Ansible playbook content for configuring Cisco ACI
#}
---
# Ansible Playbook for Cisco ACI configuration
# Generated by NetMan at {{ ansible_date_time.date }} {{ ansible_date_time.time }}
# Target: {{ hostname }}

- name: Configure Cisco ACI Fabric
  hosts: localhost
  gather_facts: no
  
  vars:
    aci_hostname: "{{ apic_url | default('https://10.0.0.100') }}"
    aci_username: "{{ username }}"
    aci_password: "{{ password }}"
    aci_use_proxy: {{ apic_use_proxy | default('no') }}
    aci_validate_certs: {{ apic_validate_certs | default('no') }}
    
  tasks:
    - name: Ensure tenant exists
      cisco.aci.aci_tenant:
        host: "{{ aci_hostname }}"
        username: "{{ aci_username }}"
        password: "{{ aci_password }}"
        use_proxy: "{{ aci_use_proxy }}"
        validate_certs: "{{ aci_validate_certs }}"
        tenant: "{{ tenant.name }}"
        description: "{{ tenant.description | default('') }}"
        state: present
      loop: "{{ tenants }}"
      loop_control:
        loop_var: tenant
      
    # Configure VRFs
    - name: Ensure VRFs exist
      cisco.aci.aci_vrf:
        host: "{{ aci_hostname }}"
        username: "{{ aci_username }}"
        password: "{{ aci_password }}"
        use_proxy: "{{ aci_use_proxy }}"
        validate_certs: "{{ aci_validate_certs }}"
        tenant: "{{ tenant.name }}"
        vrf: "{{ vrf.name }}"
        description: "{{ vrf.description | default('') }}"
        policy_control_preference: "{{ vrf.policy_control_preference | default('enforced') }}"
        policy_control_direction: "{{ vrf.policy_control_direction | default('ingress') }}"
        state: present
      loop: "{{ tenants }}"
      loop_control:
        loop_var: tenant
      when: tenant.vrfs is defined
      with_items: "{{ tenant.vrfs | default([]) }}"
      loop_control:
        loop_var: vrf
      
    # Configure Bridge Domains
    - name: Ensure Bridge Domains exist
      cisco.aci.aci_bd:
        host: "{{ aci_hostname }}"
        username: "{{ aci_username }}"
        password: "{{ aci_password }}"
        use_proxy: "{{ aci_use_proxy }}"
        validate_certs: "{{ aci_validate_certs }}"
        tenant: "{{ tenant.name }}"
        bd: "{{ bd.name }}"
        vrf: "{{ bd.vrf }}"
        description: "{{ bd.description | default('') }}"
        enable_routing: "{{ bd.unicast_routing | default('yes') }}"
        arp_flooding: "{{ bd.arp_flooding | default('no') }}"
        l2_unknown_unicast: "{{ bd.l2_unknown_unicast | default('proxy') }}"
        state: present
      loop: "{{ tenants }}"
      loop_control:
        loop_var: tenant
      when: tenant.bridge_domains is defined
      with_items: "{{ tenant.bridge_domains | default([]) }}"
      loop_control:
        loop_var: bd
      
    # Configure BD Subnets
    - name: Ensure BD Subnets exist
      cisco.aci.aci_bd_subnet:
        host: "{{ aci_hostname }}"
        username: "{{ aci_username }}"
        password: "{{ aci_password }}"
        use_proxy: "{{ aci_use_proxy }}"
        validate_certs: "{{ aci_validate_certs }}"
        tenant: "{{ tenant.name }}"
        bd: "{{ bd.name }}"
        gateway: "{{ subnet.gateway }}"
        mask: "{{ subnet.gateway.split('/')[1] }}"
        scope: "{{ subnet.scope | default('private') }}"
        state: present
      loop: "{{ tenants }}"
      loop_control:
        loop_var: tenant
      when: tenant.bridge_domains is defined
      with_subelements:
        - "{{ tenant.bridge_domains | default([]) }}"
        - subnets
        - skip_missing: yes
      loop_control:
        loop_var: subnet
      
    # Configure Application Profiles
    - name: Ensure Application Profiles exist
      cisco.aci.aci_ap:
        host: "{{ aci_hostname }}"
        username: "{{ aci_username }}"
        password: "{{ aci_password }}"
        use_proxy: "{{ aci_use_proxy }}"
        validate_certs: "{{ aci_validate_certs }}"
        tenant: "{{ tenant.name }}"
        ap: "{{ app.name }}"
        description: "{{ app.description | default('') }}"
        state: present
      loop: "{{ tenants }}"
      loop_control:
        loop_var: tenant
      when: tenant.app_profiles is defined
      with_items: "{{ tenant.app_profiles | default([]) }}"
      loop_control:
        loop_var: app
      
    # Configure EPGs
    - name: Ensure EPGs exist
      cisco.aci.aci_epg:
        host: "{{ aci_hostname }}"
        username: "{{ aci_username }}"
        password: "{{ aci_password }}"
        use_proxy: "{{ aci_use_proxy }}"
        validate_certs: "{{ aci_validate_certs }}"
        tenant: "{{ tenant.name }}"
        ap: "{{ app.name }}"
        epg: "{{ epg.name }}"
        bd: "{{ epg.bridge_domain }}"
        description: "{{ epg.description | default('') }}"
        intra_epg_isolation: "{{ epg.intra_epg_isolation | default('unenforced') }}"
        state: present
      loop: "{{ tenants }}"
      loop_control:
        loop_var: tenant
      when: tenant.app_profiles is defined
      nested:
        - "{{ tenant.app_profiles | default([]) }}"
        - epgs
      loop_control:
        loop_var: epg
      
    # Configure Contracts and Filters
    - name: Ensure Contract Filters exist
      cisco.aci.aci_filter:
        host: "{{ aci_hostname }}"
        username: "{{ aci_username }}"
        password: "{{ aci_password }}"
        use_proxy: "{{ aci_use_proxy }}"
        validate_certs: "{{ aci_validate_certs }}"
        tenant: "{{ tenant.name }}"
        filter: "{{ filter.name }}"
        description: "{{ filter.description | default('') }}"
        state: present
      loop: "{{ contracts }}"
      loop_control:
        loop_var: contract
      when: contracts is defined
      with_items: "{{ contract.filters | default([]) }}"
      loop_control:
        loop_var: filter
      
    - name: Ensure Filter Entries exist
      cisco.aci.aci_filter_entry:
        host: "{{ aci_hostname }}"
        username: "{{ aci_username }}"
        password: "{{ aci_password }}"
        use_proxy: "{{ aci_use_proxy }}"
        validate_certs: "{{ aci_validate_certs }}"
        tenant: "{{ tenant.name }}"
        filter: "{{ filter.name }}"
        entry: "{{ entry.name }}"
        ether_type: "{{ entry.ether_type | default('ip') }}"
        ip_protocol: "{{ entry.protocol | default('tcp') }}"
        dst_port_start: "{{ entry.dest_port_from | default('1') }}"
        dst_port_end: "{{ entry.dest_port_to | default('65535') }}"
        state: present
      loop: "{{ contracts }}"
      loop_control:
        loop_var: contract
      when: contracts is defined
      nested:
        - "{{ contract.filters | default([]) }}"
        - entries
      loop_control:
        loop_var: entry
      
    - name: Ensure Contracts exist
      cisco.aci.aci_contract:
        host: "{{ aci_hostname }}"
        username: "{{ aci_username }}"
        password: "{{ aci_password }}"
        use_proxy: "{{ aci_use_proxy }}"
        validate_certs: "{{ aci_validate_certs }}"
        tenant: "{{ tenant.name }}"
        contract: "{{ contract.name }}"
        description: "{{ contract.description | default('') }}"
        scope: "{{ contract.scope | default('tenant') }}"
        state: present
      loop: "{{ contracts }}"
      loop_control:
        loop_var: contract
      when: contracts is defined
      
    - name: Ensure Contract Subjects exist
      cisco.aci.aci_contract_subject:
        host: "{{ aci_hostname }}"
        username: "{{ aci_username }}"
        password: "{{ aci_password }}"
        use_proxy: "{{ aci_use_proxy }}"
        validate_certs: "{{ aci_validate_certs }}"
        tenant: "{{ tenant.name }}"
        contract: "{{ contract.name }}"
        subject: "{{ contract.name }}_subject"
        reverse_filter: "{{ contract.reverse_filter | default('yes') }}"
        state: present
      loop: "{{ contracts }}"
      loop_control:
        loop_var: contract
      when: contracts is defined
      
    - name: Ensure Contract Subject to Filter binding exist
      cisco.aci.aci_contract_subject_to_filter:
        host: "{{ aci_hostname }}"
        username: "{{ aci_username }}"
        password: "{{ aci_password }}"
        use_proxy: "{{ aci_use_proxy }}"
        validate_certs: "{{ aci_validate_certs }}"
        tenant: "{{ tenant.name }}"
        contract: "{{ contract.name }}"
        subject: "{{ contract.name }}_subject"
        filter: "{{ filter.name }}"
        state: present
      loop: "{{ contracts }}"
      loop_control:
        loop_var: contract
      when: contracts is defined
      with_items: "{{ contract.filters | default([]) }}"
      loop_control:
        loop_var: filter
      
    # Apply contracts to EPGs
    - name: Apply Contracts to EPGs
      cisco.aci.aci_epg_to_contract:
        host: "{{ aci_hostname }}"
        username: "{{ aci_username }}"
        password: "{{ aci_password }}"
        use_proxy: "{{ aci_use_proxy }}"
        validate_certs: "{{ aci_validate_certs }}"
        tenant: "{{ tenant.name }}"
        ap: "{{ app_profile }}"
        epg: "{{ application.consumer }}"
        contract: "{{ application.contract }}"
        contract_type: consumer
        state: present
      loop: "{{ contract_applications }}"
      loop_control:
        loop_var: application
      when: contract_applications is defined
      
    - name: Apply Provider Contracts to EPGs
      cisco.aci.aci_epg_to_contract:
        host: "{{ aci_hostname }}"
        username: "{{ aci_username }}"
        password: "{{ aci_password }}"
        use_proxy: "{{ aci_use_proxy }}"
        validate_certs: "{{ aci_validate_certs }}"
        tenant: "{{ tenant.name }}"
        ap: "{{ app_profile }}"
        epg: "{{ application.provider }}"
        contract: "{{ application.contract }}"
        contract_type: provider
        state: present
      loop: "{{ contract_applications }}"
      loop_control:
        loop_var: application
      when: contract_applications is defined